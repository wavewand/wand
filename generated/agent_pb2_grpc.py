# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import agent_pb2 as agent__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in agent_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AgentServiceStub(object):
    """Service Definitions
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubmitTask = channel.unary_unary(
                '/mcp.AgentService/SubmitTask',
                request_serializer=agent__pb2.SubmitTaskRequest.SerializeToString,
                response_deserializer=agent__pb2.TaskResponse.FromString,
                _registered_method=True)
        self.GetTaskStatus = channel.unary_unary(
                '/mcp.AgentService/GetTaskStatus',
                request_serializer=agent__pb2.TaskStatusRequest.SerializeToString,
                response_deserializer=agent__pb2.TaskStatusResponse.FromString,
                _registered_method=True)
        self.UpdateTaskStatus = channel.unary_unary(
                '/mcp.AgentService/UpdateTaskStatus',
                request_serializer=agent__pb2.UpdateTaskStatusRequest.SerializeToString,
                response_deserializer=agent__pb2.TaskResponse.FromString,
                _registered_method=True)
        self.GetAgentTasks = channel.unary_unary(
                '/mcp.AgentService/GetAgentTasks',
                request_serializer=agent__pb2.AgentTasksRequest.SerializeToString,
                response_deserializer=agent__pb2.AgentTasksResponse.FromString,
                _registered_method=True)
        self.SendMessage = channel.unary_unary(
                '/mcp.AgentService/SendMessage',
                request_serializer=agent__pb2.SendMessageRequest.SerializeToString,
                response_deserializer=agent__pb2.MessageResponse.FromString,
                _registered_method=True)
        self.GetMessages = channel.unary_stream(
                '/mcp.AgentService/GetMessages',
                request_serializer=agent__pb2.GetMessagesRequest.SerializeToString,
                response_deserializer=agent__pb2.Message.FromString,
                _registered_method=True)
        self.RequestCollaboration = channel.unary_unary(
                '/mcp.AgentService/RequestCollaboration',
                request_serializer=agent__pb2.CollaborationRequest.SerializeToString,
                response_deserializer=agent__pb2.CollaborationResponse.FromString,
                _registered_method=True)
        self.GetAgentStatus = channel.unary_unary(
                '/mcp.AgentService/GetAgentStatus',
                request_serializer=agent__pb2.AgentStatusRequest.SerializeToString,
                response_deserializer=agent__pb2.AgentStatusResponse.FromString,
                _registered_method=True)
        self.Heartbeat = channel.unary_unary(
                '/mcp.AgentService/Heartbeat',
                request_serializer=agent__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=agent__pb2.HeartbeatResponse.FromString,
                _registered_method=True)


class AgentServiceServicer(object):
    """Service Definitions
    """

    def SubmitTask(self, request, context):
        """Task Management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTaskStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTaskStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAgentTasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendMessage(self, request, context):
        """Agent Communication
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMessages(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RequestCollaboration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAgentStatus(self, request, context):
        """Health and Status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Heartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AgentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubmitTask': grpc.unary_unary_rpc_method_handler(
                    servicer.SubmitTask,
                    request_deserializer=agent__pb2.SubmitTaskRequest.FromString,
                    response_serializer=agent__pb2.TaskResponse.SerializeToString,
            ),
            'GetTaskStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTaskStatus,
                    request_deserializer=agent__pb2.TaskStatusRequest.FromString,
                    response_serializer=agent__pb2.TaskStatusResponse.SerializeToString,
            ),
            'UpdateTaskStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTaskStatus,
                    request_deserializer=agent__pb2.UpdateTaskStatusRequest.FromString,
                    response_serializer=agent__pb2.TaskResponse.SerializeToString,
            ),
            'GetAgentTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAgentTasks,
                    request_deserializer=agent__pb2.AgentTasksRequest.FromString,
                    response_serializer=agent__pb2.AgentTasksResponse.SerializeToString,
            ),
            'SendMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMessage,
                    request_deserializer=agent__pb2.SendMessageRequest.FromString,
                    response_serializer=agent__pb2.MessageResponse.SerializeToString,
            ),
            'GetMessages': grpc.unary_stream_rpc_method_handler(
                    servicer.GetMessages,
                    request_deserializer=agent__pb2.GetMessagesRequest.FromString,
                    response_serializer=agent__pb2.Message.SerializeToString,
            ),
            'RequestCollaboration': grpc.unary_unary_rpc_method_handler(
                    servicer.RequestCollaboration,
                    request_deserializer=agent__pb2.CollaborationRequest.FromString,
                    response_serializer=agent__pb2.CollaborationResponse.SerializeToString,
            ),
            'GetAgentStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAgentStatus,
                    request_deserializer=agent__pb2.AgentStatusRequest.FromString,
                    response_serializer=agent__pb2.AgentStatusResponse.SerializeToString,
            ),
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=agent__pb2.HeartbeatRequest.FromString,
                    response_serializer=agent__pb2.HeartbeatResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mcp.AgentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('mcp.AgentService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AgentService(object):
    """Service Definitions
    """

    @staticmethod
    def SubmitTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.AgentService/SubmitTask',
            agent__pb2.SubmitTaskRequest.SerializeToString,
            agent__pb2.TaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTaskStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.AgentService/GetTaskStatus',
            agent__pb2.TaskStatusRequest.SerializeToString,
            agent__pb2.TaskStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateTaskStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.AgentService/UpdateTaskStatus',
            agent__pb2.UpdateTaskStatusRequest.SerializeToString,
            agent__pb2.TaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAgentTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.AgentService/GetAgentTasks',
            agent__pb2.AgentTasksRequest.SerializeToString,
            agent__pb2.AgentTasksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SendMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.AgentService/SendMessage',
            agent__pb2.SendMessageRequest.SerializeToString,
            agent__pb2.MessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMessages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/mcp.AgentService/GetMessages',
            agent__pb2.GetMessagesRequest.SerializeToString,
            agent__pb2.Message.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RequestCollaboration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.AgentService/RequestCollaboration',
            agent__pb2.CollaborationRequest.SerializeToString,
            agent__pb2.CollaborationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAgentStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.AgentService/GetAgentStatus',
            agent__pb2.AgentStatusRequest.SerializeToString,
            agent__pb2.AgentStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.AgentService/Heartbeat',
            agent__pb2.HeartbeatRequest.SerializeToString,
            agent__pb2.HeartbeatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class CoordinatorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.DistributeTask = channel.unary_unary(
                '/mcp.CoordinatorService/DistributeTask',
                request_serializer=agent__pb2.DistributeTaskRequest.SerializeToString,
                response_deserializer=agent__pb2.TaskResponse.FromString,
                _registered_method=True)
        self.GetSystemStatus = channel.unary_unary(
                '/mcp.CoordinatorService/GetSystemStatus',
                request_serializer=agent__pb2.SystemStatusRequest.SerializeToString,
                response_deserializer=agent__pb2.SystemStatusResponse.FromString,
                _registered_method=True)
        self.GetAllTasks = channel.unary_unary(
                '/mcp.CoordinatorService/GetAllTasks',
                request_serializer=agent__pb2.AllTasksRequest.SerializeToString,
                response_deserializer=agent__pb2.AllTasksResponse.FromString,
                _registered_method=True)
        self.GetAllAgents = channel.unary_unary(
                '/mcp.CoordinatorService/GetAllAgents',
                request_serializer=agent__pb2.AllAgentsRequest.SerializeToString,
                response_deserializer=agent__pb2.AllAgentsResponse.FromString,
                _registered_method=True)
        self.RegisterAgent = channel.unary_unary(
                '/mcp.CoordinatorService/RegisterAgent',
                request_serializer=agent__pb2.RegisterAgentRequest.SerializeToString,
                response_deserializer=agent__pb2.RegisterAgentResponse.FromString,
                _registered_method=True)
        self.UnregisterAgent = channel.unary_unary(
                '/mcp.CoordinatorService/UnregisterAgent',
                request_serializer=agent__pb2.UnregisterAgentRequest.SerializeToString,
                response_deserializer=agent__pb2.UnregisterAgentResponse.FromString,
                _registered_method=True)
        self.CreateProject = channel.unary_unary(
                '/mcp.CoordinatorService/CreateProject',
                request_serializer=agent__pb2.CreateProjectRequest.SerializeToString,
                response_deserializer=agent__pb2.CreateProjectResponse.FromString,
                _registered_method=True)
        self.GetProjectStatus = channel.unary_unary(
                '/mcp.CoordinatorService/GetProjectStatus',
                request_serializer=agent__pb2.ProjectStatusRequest.SerializeToString,
                response_deserializer=agent__pb2.ProjectStatusResponse.FromString,
                _registered_method=True)
        self.CheckDependencies = channel.unary_unary(
                '/mcp.CoordinatorService/CheckDependencies',
                request_serializer=agent__pb2.CheckDependenciesRequest.SerializeToString,
                response_deserializer=agent__pb2.CheckDependenciesResponse.FromString,
                _registered_method=True)
        self.NotifyTaskCompletion = channel.unary_unary(
                '/mcp.CoordinatorService/NotifyTaskCompletion',
                request_serializer=agent__pb2.TaskCompletionNotification.SerializeToString,
                response_deserializer=agent__pb2.TaskCompletionResponse.FromString,
                _registered_method=True)


class CoordinatorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def DistributeTask(self, request, context):
        """Task Distribution
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSystemStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllTasks(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAllAgents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterAgent(self, request, context):
        """Agent Management
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UnregisterAgent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateProject(self, request, context):
        """Project Coordination
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProjectStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckDependencies(self, request, context):
        """Task Dependencies
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotifyTaskCompletion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CoordinatorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'DistributeTask': grpc.unary_unary_rpc_method_handler(
                    servicer.DistributeTask,
                    request_deserializer=agent__pb2.DistributeTaskRequest.FromString,
                    response_serializer=agent__pb2.TaskResponse.SerializeToString,
            ),
            'GetSystemStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSystemStatus,
                    request_deserializer=agent__pb2.SystemStatusRequest.FromString,
                    response_serializer=agent__pb2.SystemStatusResponse.SerializeToString,
            ),
            'GetAllTasks': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllTasks,
                    request_deserializer=agent__pb2.AllTasksRequest.FromString,
                    response_serializer=agent__pb2.AllTasksResponse.SerializeToString,
            ),
            'GetAllAgents': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAllAgents,
                    request_deserializer=agent__pb2.AllAgentsRequest.FromString,
                    response_serializer=agent__pb2.AllAgentsResponse.SerializeToString,
            ),
            'RegisterAgent': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterAgent,
                    request_deserializer=agent__pb2.RegisterAgentRequest.FromString,
                    response_serializer=agent__pb2.RegisterAgentResponse.SerializeToString,
            ),
            'UnregisterAgent': grpc.unary_unary_rpc_method_handler(
                    servicer.UnregisterAgent,
                    request_deserializer=agent__pb2.UnregisterAgentRequest.FromString,
                    response_serializer=agent__pb2.UnregisterAgentResponse.SerializeToString,
            ),
            'CreateProject': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateProject,
                    request_deserializer=agent__pb2.CreateProjectRequest.FromString,
                    response_serializer=agent__pb2.CreateProjectResponse.SerializeToString,
            ),
            'GetProjectStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetProjectStatus,
                    request_deserializer=agent__pb2.ProjectStatusRequest.FromString,
                    response_serializer=agent__pb2.ProjectStatusResponse.SerializeToString,
            ),
            'CheckDependencies': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckDependencies,
                    request_deserializer=agent__pb2.CheckDependenciesRequest.FromString,
                    response_serializer=agent__pb2.CheckDependenciesResponse.SerializeToString,
            ),
            'NotifyTaskCompletion': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyTaskCompletion,
                    request_deserializer=agent__pb2.TaskCompletionNotification.FromString,
                    response_serializer=agent__pb2.TaskCompletionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mcp.CoordinatorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('mcp.CoordinatorService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CoordinatorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def DistributeTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.CoordinatorService/DistributeTask',
            agent__pb2.DistributeTaskRequest.SerializeToString,
            agent__pb2.TaskResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSystemStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.CoordinatorService/GetSystemStatus',
            agent__pb2.SystemStatusRequest.SerializeToString,
            agent__pb2.SystemStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.CoordinatorService/GetAllTasks',
            agent__pb2.AllTasksRequest.SerializeToString,
            agent__pb2.AllTasksResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetAllAgents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.CoordinatorService/GetAllAgents',
            agent__pb2.AllAgentsRequest.SerializeToString,
            agent__pb2.AllAgentsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RegisterAgent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.CoordinatorService/RegisterAgent',
            agent__pb2.RegisterAgentRequest.SerializeToString,
            agent__pb2.RegisterAgentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UnregisterAgent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.CoordinatorService/UnregisterAgent',
            agent__pb2.UnregisterAgentRequest.SerializeToString,
            agent__pb2.UnregisterAgentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateProject(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.CoordinatorService/CreateProject',
            agent__pb2.CreateProjectRequest.SerializeToString,
            agent__pb2.CreateProjectResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetProjectStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.CoordinatorService/GetProjectStatus',
            agent__pb2.ProjectStatusRequest.SerializeToString,
            agent__pb2.ProjectStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CheckDependencies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.CoordinatorService/CheckDependencies',
            agent__pb2.CheckDependenciesRequest.SerializeToString,
            agent__pb2.CheckDependenciesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NotifyTaskCompletion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.CoordinatorService/NotifyTaskCompletion',
            agent__pb2.TaskCompletionNotification.SerializeToString,
            agent__pb2.TaskCompletionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class IntegrationServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteSlackOperation = channel.unary_unary(
                '/mcp.IntegrationService/ExecuteSlackOperation',
                request_serializer=agent__pb2.SlackOperationRequest.SerializeToString,
                response_deserializer=agent__pb2.IntegrationResponse.FromString,
                _registered_method=True)
        self.ExecuteGitOperation = channel.unary_unary(
                '/mcp.IntegrationService/ExecuteGitOperation',
                request_serializer=agent__pb2.GitOperationRequest.SerializeToString,
                response_deserializer=agent__pb2.IntegrationResponse.FromString,
                _registered_method=True)
        self.ExecuteAWSOperation = channel.unary_unary(
                '/mcp.IntegrationService/ExecuteAWSOperation',
                request_serializer=agent__pb2.AWSOperationRequest.SerializeToString,
                response_deserializer=agent__pb2.IntegrationResponse.FromString,
                _registered_method=True)
        self.ExecuteJenkinsOperation = channel.unary_unary(
                '/mcp.IntegrationService/ExecuteJenkinsOperation',
                request_serializer=agent__pb2.JenkinsOperationRequest.SerializeToString,
                response_deserializer=agent__pb2.IntegrationResponse.FromString,
                _registered_method=True)
        self.ExecuteYouTrackOperation = channel.unary_unary(
                '/mcp.IntegrationService/ExecuteYouTrackOperation',
                request_serializer=agent__pb2.YouTrackOperationRequest.SerializeToString,
                response_deserializer=agent__pb2.IntegrationResponse.FromString,
                _registered_method=True)
        self.GetIntegrationStatus = channel.unary_unary(
                '/mcp.IntegrationService/GetIntegrationStatus',
                request_serializer=agent__pb2.IntegrationStatusRequest.SerializeToString,
                response_deserializer=agent__pb2.IntegrationStatusResponse.FromString,
                _registered_method=True)
        self.TestIntegration = channel.unary_unary(
                '/mcp.IntegrationService/TestIntegration',
                request_serializer=agent__pb2.TestIntegrationRequest.SerializeToString,
                response_deserializer=agent__pb2.TestIntegrationResponse.FromString,
                _registered_method=True)
        self.ListIntegrations = channel.unary_unary(
                '/mcp.IntegrationService/ListIntegrations',
                request_serializer=agent__pb2.ListIntegrationsRequest.SerializeToString,
                response_deserializer=agent__pb2.ListIntegrationsResponse.FromString,
                _registered_method=True)
        self.ExecuteHaystackRAG = channel.unary_unary(
                '/mcp.IntegrationService/ExecuteHaystackRAG',
                request_serializer=agent__pb2.HaystackRAGRequest.SerializeToString,
                response_deserializer=agent__pb2.HaystackResponse.FromString,
                _registered_method=True)
        self.ExecuteHaystackSearch = channel.unary_unary(
                '/mcp.IntegrationService/ExecuteHaystackSearch',
                request_serializer=agent__pb2.HaystackSearchRequest.SerializeToString,
                response_deserializer=agent__pb2.HaystackResponse.FromString,
                _registered_method=True)
        self.IngestHaystackDocument = channel.unary_unary(
                '/mcp.IntegrationService/IngestHaystackDocument',
                request_serializer=agent__pb2.HaystackDocumentRequest.SerializeToString,
                response_deserializer=agent__pb2.HaystackResponse.FromString,
                _registered_method=True)


class IntegrationServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ExecuteSlackOperation(self, request, context):
        """Integration Operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteGitOperation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteAWSOperation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteJenkinsOperation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteYouTrackOperation(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetIntegrationStatus(self, request, context):
        """Integration Health
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestIntegration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListIntegrations(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteHaystackRAG(self, request, context):
        """Haystack Operations
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteHaystackSearch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IngestHaystackDocument(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IntegrationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ExecuteSlackOperation': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteSlackOperation,
                    request_deserializer=agent__pb2.SlackOperationRequest.FromString,
                    response_serializer=agent__pb2.IntegrationResponse.SerializeToString,
            ),
            'ExecuteGitOperation': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteGitOperation,
                    request_deserializer=agent__pb2.GitOperationRequest.FromString,
                    response_serializer=agent__pb2.IntegrationResponse.SerializeToString,
            ),
            'ExecuteAWSOperation': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteAWSOperation,
                    request_deserializer=agent__pb2.AWSOperationRequest.FromString,
                    response_serializer=agent__pb2.IntegrationResponse.SerializeToString,
            ),
            'ExecuteJenkinsOperation': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteJenkinsOperation,
                    request_deserializer=agent__pb2.JenkinsOperationRequest.FromString,
                    response_serializer=agent__pb2.IntegrationResponse.SerializeToString,
            ),
            'ExecuteYouTrackOperation': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteYouTrackOperation,
                    request_deserializer=agent__pb2.YouTrackOperationRequest.FromString,
                    response_serializer=agent__pb2.IntegrationResponse.SerializeToString,
            ),
            'GetIntegrationStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIntegrationStatus,
                    request_deserializer=agent__pb2.IntegrationStatusRequest.FromString,
                    response_serializer=agent__pb2.IntegrationStatusResponse.SerializeToString,
            ),
            'TestIntegration': grpc.unary_unary_rpc_method_handler(
                    servicer.TestIntegration,
                    request_deserializer=agent__pb2.TestIntegrationRequest.FromString,
                    response_serializer=agent__pb2.TestIntegrationResponse.SerializeToString,
            ),
            'ListIntegrations': grpc.unary_unary_rpc_method_handler(
                    servicer.ListIntegrations,
                    request_deserializer=agent__pb2.ListIntegrationsRequest.FromString,
                    response_serializer=agent__pb2.ListIntegrationsResponse.SerializeToString,
            ),
            'ExecuteHaystackRAG': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteHaystackRAG,
                    request_deserializer=agent__pb2.HaystackRAGRequest.FromString,
                    response_serializer=agent__pb2.HaystackResponse.SerializeToString,
            ),
            'ExecuteHaystackSearch': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteHaystackSearch,
                    request_deserializer=agent__pb2.HaystackSearchRequest.FromString,
                    response_serializer=agent__pb2.HaystackResponse.SerializeToString,
            ),
            'IngestHaystackDocument': grpc.unary_unary_rpc_method_handler(
                    servicer.IngestHaystackDocument,
                    request_deserializer=agent__pb2.HaystackDocumentRequest.FromString,
                    response_serializer=agent__pb2.HaystackResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mcp.IntegrationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('mcp.IntegrationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class IntegrationService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ExecuteSlackOperation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.IntegrationService/ExecuteSlackOperation',
            agent__pb2.SlackOperationRequest.SerializeToString,
            agent__pb2.IntegrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteGitOperation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.IntegrationService/ExecuteGitOperation',
            agent__pb2.GitOperationRequest.SerializeToString,
            agent__pb2.IntegrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteAWSOperation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.IntegrationService/ExecuteAWSOperation',
            agent__pb2.AWSOperationRequest.SerializeToString,
            agent__pb2.IntegrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteJenkinsOperation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.IntegrationService/ExecuteJenkinsOperation',
            agent__pb2.JenkinsOperationRequest.SerializeToString,
            agent__pb2.IntegrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteYouTrackOperation(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.IntegrationService/ExecuteYouTrackOperation',
            agent__pb2.YouTrackOperationRequest.SerializeToString,
            agent__pb2.IntegrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetIntegrationStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.IntegrationService/GetIntegrationStatus',
            agent__pb2.IntegrationStatusRequest.SerializeToString,
            agent__pb2.IntegrationStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TestIntegration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.IntegrationService/TestIntegration',
            agent__pb2.TestIntegrationRequest.SerializeToString,
            agent__pb2.TestIntegrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListIntegrations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.IntegrationService/ListIntegrations',
            agent__pb2.ListIntegrationsRequest.SerializeToString,
            agent__pb2.ListIntegrationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteHaystackRAG(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.IntegrationService/ExecuteHaystackRAG',
            agent__pb2.HaystackRAGRequest.SerializeToString,
            agent__pb2.HaystackResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteHaystackSearch(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.IntegrationService/ExecuteHaystackSearch',
            agent__pb2.HaystackSearchRequest.SerializeToString,
            agent__pb2.HaystackResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def IngestHaystackDocument(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mcp.IntegrationService/IngestHaystackDocument',
            agent__pb2.HaystackDocumentRequest.SerializeToString,
            agent__pb2.HaystackResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
